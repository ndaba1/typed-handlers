---
import { Prism } from "@astrojs/prism";
import Layout from "../layouts/Layout.astro";

const features = [
  {
    title: "Minimal footprint",
    description: "Built with zero dependencies and a small API surface",
  },
  {
    title: "Pages router support",
    description: "Pages or app router, it matters not. Both are supported",
  },
  {
    title: "IDE and runtime type safety",
    description:
      "Linter errors when building and red squiggly lines in your editor",
  },
  {
    title: "Easy to integrate",
    description: "Built to work seamlessly with your existing Next.js project",
  },
  {
    title: "Endpoint autocompletion",
    description: "Make requests to typed endpoints with confidence",
  },
  {
    title: "Built on Zod",
    description:
      "Leverage the power of Zod to define your input and output schemas",
  },
];

const tsconfig = `
{
  // ...
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "typed-handlers.d.ts"
  ],
}
`;

const handler = `
// app/api/projects/[id]/route.ts (Route handler)

import { NextResponse } from "next/server";
import type { Params } from "typed-handlers";

export const GET = async (
  req: Request,
  { params }: { params: Params<"/api/projects/[id]"> }
) => {
  return NextResponse.json({
    id: params.id,
    name: "My Project",
    title: "My Project",
    slug: "my-project",
    description: "This is my project",
  });
};
`;

const client = `
// app/projects/[id]/page.tsx (Client component)

"use client";

import { useEffect, useState } from "react";
import { handle } from "typed-handlers";

export default function ProjectsPage({ params }: { params: { id: string } }) {
  useEffect(() => {
    const cfg = handle("/api/projects/[id]", {
      params,
    });

    async function load() {
      fetch(cfg.url)
        .then((res) => res.json())
        .then((data) => console.log(data));
    }

    load();
  }, [params]);

  return <div>{/* ... */}</div>;
}
`;

const signature = `

import { handle } from "typed-handlers";
import { z } from "zod";

const updateProjectSchema = z.object({
  name: z.string(),
  description: z.string(),
  completed: z.boolean(),
});

const cfg = handle("/api/projects/[id]", {
  params: {
    id: "123456",
  },
  query: {
    include: "some_value",
  },
  bodySchema: updateProjectSchema,
});

console.log(cfg.url); // /api/projects/123456?include=some_value
`;

const body = `
const typeSafeBody = cfg.body({
  name: "My Project",
  description: "This is my project",
  completed: false,
});
`;
---

<Layout title="Typed handlers">
  <span class="absolute top-5 right-5 text-xs">
    Made by <a
      target="_blank"
      href="https://x.com/@vndaba_"
      class="text-blue-500">@vndaba_</a
    >
  </span>

  <article class="prose max-w-7xl mx-auto p-5 py-20 space-y-5">
    <h1 class="heading text-center font-semibold leading-loose text-4xl">
      Simple, <span
        class="underline decoration-wavy decoration-red-500 underline-offset-[10px]"
        >type-safe</span
      > REST APIs in Next.js
    </h1>
    <p class="text-center text-xl leading-relaxed max-w-lg mx-auto">
      A simple approach to achieving type safety in your Next.js project without
      sacrificing developer experience or the simplicity of RESTful APIs
    </p>

    <ul
      class="grid list-none grid-cols-1 md:grid-cols-3 gap-6 py-10 max-w-5xl mx-auto"
    >
      {
        features.map((feature) => (
          <li class="rounded-xl space-y-3 shadow-sm bg-white p-5">
            <span class="text-lg">{feature.title}</span>
            <p class="text-gray-500">{feature.description}</p>
          </li>
        ))
      }
    </ul>

    <section id="getting-started" class="pb-10 max-w-5xl mx-auto space-y-6">
      <h2 class="text-2xl heading text-center mb-8">Getting started</h2>
      <div>
        <p class="mb-2 text-gray-500 text-sm tracking-wide">INSTALLATION</p>
        <Prism
          lang="bash"
          code={`npm install typed-handlers`}
          class="rounded-lg bg-white p-4"
        />
      </div>
      <div class="space-y-3">
        <span class="text-gray-500 text-sm tracking-wide">CONFIGURATION</span>
        <p class="text-lg">
          The package exposes a next.js plugin that is used to generate the
          route definitions. You will need to add the following to your
          <code>next.config.js</code> file. If you are using this with the <code
            >pages</code
          > router, you will need to set the <code>legacy</code> option to <code
            >true</code
          >
        </p>
        <Prism
          lang="js"
          code={`\/\/ next.config.js\n\nimport { withTypedHandlers } from 'typed-handlers/next';\n\nexport default withTypedHandlers({\n\t\/\/... next config \n},{\n legacy: true \/\/ pages router\n});`}
          class="rounded-lg bg-white p-4"
        />
        <p>
          Once you&apos;ve added this to your config, you'll notice that a new
          file <code>typed-handlers.d.ts</code> is created add added to the <code
            >include</code
          >
          options in your <code>tsconfig.json</code> file. If this doesn't happen
          automatically for whatever reason, ensure your setup resembles the following
        </p>
        <Prism
          lang="ts"
          code={`\/\/ typed-handlers.d.ts\n\n/// <reference types='typed-handlers/routes' />`}
          class="rounded-lg bg-white p-4"
        />
        <Prism
          lang="json"
          code={`\/\/ tsconfig.json\n\n${tsconfig.trim()}`}
          class="rounded-lg bg-white p-4"
        />
        <p>
          And that&apos;s it! In dev mode, the package will watch for
          changes/new api routes and generate the necessary types for you to use
          in your app. In production, the package will generate the types at
          build time.
        </p>
      </div>
    </section>

    <section id="example-usage" class="pb-10 max-w-5xl mx-auto space-y-6">
      <h2 class="text-2xl heading text-center mb-8">Example usage</h2>

      <div class="space-y-3">
        <Prism
          lang="ts"
          code={handler.trim()}
          class="rounded-lg bg-white p-4"
        />
        <Prism lang="ts" code={client.trim()} class="rounded-lg bg-white p-4" />
        <p>
          The simplified example above demonstrates how to use the package. As
          you can see, it exposes a very minimal API surface with the <code
            >handle</code
          > method being the only available import. This method is used to make requests
          to typed endpoints with confidence. You pass it the type-safe route path,
          in the same format as the Next.js API route, and an options object that
          optionally contains a zod request body schema, query string params, and
          route parameters. A full-fleged example would look like this:
        </p>
        <Prism
          lang="ts"
          code={signature.trim()}
          class="rounded-lg bg-white p-4"
        />
        <p>
          The <code>handle</code> method returns an object with a <code
            >url</code
          > property containing the actual url that you can use to make requests.
          You can then pass this to your request library of choice. (fetch/axios
          etc)
        </p>
        <p>
          Other than that, it also returns a <code>body</code> method that you can
          use to type check the request body. This method will throw a type check
          error if the body does not match the zod schema you provided. Please note
          that this method does not actually parse the body, it only helps with type
          checking.
        </p>
        <Prism lang="ts" code={body.trim()} class="rounded-lg bg-white p-4" />
      </div>

      <h2 class="text-2xl heading text-center mb-8">In summary</h2>

      <p>
        File-system based routers are great for DX, but they lack the type
        safety that is expected in a modern typescript project. And while this
        is by no means a fully type-safe solution, I think it's a start. The API
        is intentionally minimal as to avoid injecting too much opinions into
        your project. It's built to work seamlessly with your existing Next.js
        project and is designed to be as unobtrusive as possible.
      </p>

      <p>
        If you like what you just read, please consider giving it a star on
        <a
          target="_blank"
          class="underline text-blue-500"
          href="https://github.com/ndaba1/typed-handlers">Github</a
        >
      </p>
    </section>
  </article>
</Layout>
