---
import { Prism } from "@astrojs/prism";
import Layout from "../layouts/Layout.astro";

const features = [
  {
    title: "Minimal footprint",
    description: "Built with zero dependencies and a small API surface",
  },
  {
    title: "Pages router support",
    description: "Pages or app router, it matters not. Both are supported",
  },
  {
    title: "IDE and runtime type safety",
    description:
      "Linter errors when building and red squiggly lines in your editor",
  },
  {
    title: "Input and output validation",
    description:
      "Run-time validation and sanitization of input and output data",
  },
  {
    title: "Endpoint autocompletion",
    description: "Make requests to typed endpoints with confidence",
  },
  {
    title: "Built on Zod",
    description:
      "Leverage the power of Zod to define your input and output schemas",
  },
];

const tsconfig = `
{
  // ...
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "typed-handlers.d.ts"
  ],
}
`;

const handler = `
// app/api/hello.ts

import { NextResponse } from "next/server";
import { createHandler, schema } from "typed-handlers";
import { z } from "zod";

export const POST = createHandler(
  async ({ body, query }) => {
    return NextResponse.json({
      message: \`Hello, \${body.name}!\`,
    });
  },
  {
    schema: schema({
      body: z.object({
        name: z.string({ required_error: "Name is required" }),
      }),
    }),
  }
);

`;
---

<Layout title="Typed handlers">
  <main class="max-w-7xl mx-auto p-5 py-20 space-y-5">
    <h1 class="heading text-center leading-loose text-4xl">
      Simple, <span
        class="underline decoration-wavy decoration-red-500 underline-offset-[10px]"
        >type-safe</span
      > REST APIs in Next.js
    </h1>
    <p class="text-center text-xl leading-relaxed max-w-lg mx-auto">
      An opinionated approach to achieving type safety in your Next.js project
      without sacrificing developer experience or the simplicity of REST APIs
    </p>

    <ul class="grid grid-cols-1 md:grid-cols-3 gap-6 py-10 max-w-5xl mx-auto">
      {
        features.map((feature) => (
          <li class="rounded-xl space-y-3 shadow-sm bg-white p-5">
            <h3 class="text-lg">{feature.title}</h3>
            <p class="text-gray-500">{feature.description}</p>
          </li>
        ))
      }
    </ul>

    <section id="getting-started" class="pb-10 max-w-5xl mx-auto space-y-6">
      <h2 class="text-2xl heading text-center mb-8">Getting started</h2>
      <div>
        <p class="mb-2 text-gray-500 text-sm tracking-wide">INSTALLATION</p>
        <Prism
          lang="bash"
          code={`npm install typed-handlers`}
          class="rounded-lg bg-white p-4"
        />
      </div>
      <div class="space-y-3">
        <span class="text-gray-500 text-sm tracking-wide">CONFIGURATION</span>
        <p>
          The package exposes a next.js plugin that is used to generate the
          route definitions. You will need to add the following to your
          <code>next.config.js</code> file. If you are using this with the <code
            >pages</code
          > router, you will need to set the <code>legacy</code> option to <code
            >true</code
          >
        </p>
        <Prism
          lang="js"
          code={`\/\/ next.config.js\n\nimport { withTypedHandlers } from 'typed-handlers/next';\n\nexport default withTypedHandlers({\n\t\/\/... next config \n},{\n legacy: true \/\/ pages router\n});`}
          class="rounded-lg bg-white p-4"
        />
        <p>
          Once you&apos;ve added this to your config, you'll notice that a new
          file <code>typed-handlers.d.ts</code> is created add added to the <code
            >include</code
          >
          options in your <code>tsconfig.json</code> file. If this doesn't happen
          automatically for whatever reason, ensure your setup resembles the following
        </p>
        <Prism
          lang="ts"
          code={`\/\/ typed-handlers.d.ts\n\n/// <reference types='typed-handlers/routes' />`}
          class="rounded-lg bg-white p-4"
        />
        <Prism
          lang="json"
          code={`\/\/ tsconfig.json\n\n${tsconfig.trim()}`}
          class="rounded-lg bg-white p-4"
        />
        <p>
          And that&apos;s it! In dev mode, the package will watch for
          changes/new api routes and generate the necessary types for you to use
          in your app. In production, the package will generate the types at
          build time.
        </p>
      </div>
    </section>

    <section id="example-usage" class="pb-10 max-w-5xl mx-auto space-y-6">
      <h2 class="text-2xl heading text-center mb-8">Example usage</h2>

      <div class="space-y-3">
        <Prism
          lang="ts"
          code={handler.trim()}
          class="rounded-lg bg-white p-4"
        />
        <p>
          The example above demonstrates a simple POST request handler. It's
          similar to the default Next.js API route handler, but with a few key
          differences:
        </p>
        <ul class="list-disc pl-5 space-y-3">
          <li>
            The route handler is wrapped in the <code>createHandler</code> utility function
            from the <code>typed-handlers</code> package. The second argument is
            an options object that contains a
            <code>schema</code> property which is used to define the input and output
            schemas for validation and type safety.
          </li>
          <li>
            To allow for output validation, the function must return a <code
              >NextResponse</code
            > object instead of the usual <code>Response</code> object. <code
              >NextResponse</code
            >
            is generic while <code>Response</code> is not.
          </li>
          <li>
            The function signature is slightly different. It receives an
            enriched object as its only argument. It contains the following
            properties: <code>request</code>, <code>context</code>, <code
              >body</code
            >, <code>query</code>, and <code>params</code> which have all been validated
            (where applicable) and typed correctly.
          </li>
          <li>
            <code>request</code> and <code>context</code> come from the Next.js API
            route handler while <code>body</code>, <code>query</code>, and <code
              >params</code
            > are the parsed request body, query string, and route parameters respectively
            (using zod objects provided in the schema).
          </li>
        </ul>
      </div>
    </section>
  </main>
</Layout>
