---
import { Prism } from "@astrojs/prism";
import Layout from "../layouts/Layout.astro";

const features = [
  {
    title: "Minimal footprint",
    description:
      "Define your API handlers in a single file, and invoke them from anywhere",
  },
  {
    title: "Pages router support",
    description:
      "The package works for both the app directory and the pages directory",
  },
  {
    title: "IDE and runtime type safety",
    description:
      "The package works for both the app directory and the pages directory",
  },
  {
    title: "Input and output validation",
    description:
      "The package works for both the app directory and the pages directory",
  },
  {
    title: "Endpoint autocomplete",
    description:
      "The package works for both the app directory and the pages directory",
  },
  {
    title: "Zero dependencies",
    description:
      "The package works for both the app directory and the pages directory",
  },
];

const tsconfig = `
{
  // ...
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "typed-handlers.d.ts"
  ],
}
`;
---

<Layout title="Typed handlers">
  <main class="max-w-7xl mx-auto p-5 py-20 space-y-5">
    <h1 class="heading text-center text-4xl">
      Simple, type-safe REST APIs in Next.js
    </h1>
    <p class="text-center text-xl leading-relaxed max-w-lg mx-auto">
      This package presents an opinionated way to define and invoke REST APIs in
      Next.js in a type-safe and dev friendly way. It is designed to be used
      with <code>zod</code>
    </p>

    <ul class="grid grid-cols-1 md:grid-cols-3 gap-6 py-10 max-w-5xl mx-auto">
      {
        features.map((feature) => (
          <li class="rounded-xl space-y-3 shadow-sm bg-white p-5">
            <h3 class="text-lg">{feature.title}</h3>
            <p class="text-gray-500">{feature.description}</p>
          </li>
        ))
      }
    </ul>

    <section class="pb-10 max-w-5xl mx-auto space-y-6">
      <h2 class="text-2xl font-medium text-center mb-8">Getting started</h2>
      <div>
        <p class="mb-2 text-gray-500 text-sm tracking-wide">INSTALLATION</p>
        <Prism
          lang="bash"
          code={`npm install typed-handlers`}
          class="rounded-lg bg-white p-4"
        />
      </div>
      <div class="space-y-3">
        <span class="text-gray-500 text-sm tracking-wide">CONFIGURATION</span>
        <p>
          The package exposes a next.js plugin that is used to generate the
          route definitions. You will need to add the following to your
          <code>next.config.js</code> file. If you are using this with the <code
            >pages</code
          > router, you will need to set the <code>legacy</code> option to <code
            >true</code
          >
        </p>
        <Prism
          lang="js"
          code={`\/\/ next.config.js\n\nimport { withTypedHandlers } from 'typed-handlers/next';\n\nexport default withTypedHandlers({\n\t\/\/... next config \n},{\n legacy: true \/\/ pages router\n});`}
          class="rounded-lg bg-white p-4"
        />
        <p>
          Once you&apos;ve added this to your config, you'll notice that a new
          file `typed-handlers.d.ts` is created add added to the `include`
          options in your <code>tsconfig.json</code> file. If this doesn't happen
          automatically for whatever reason, ensure your setup resembles the following
        </p>
        <Prism
          lang="ts"
          code={`\/\/ typed-handlers.d.ts\n\n/// <reference types='typed-handlers/routes' />`}
          class="rounded-lg bg-white p-4"
        />
        <Prism
          lang="ts"
          code={`\/\/ tsconfig.json\n\n${tsconfig.trim()}`}
          class="rounded-lg bg-white p-4"
        />
        <p>
          And that&apos;s it! In dev mode, the package will watch for
          changes/new api routes and generate the necessary types for you to use
          in your app. In production, the package will generate the types at
          build time.
        </p>
      </div>
    </section>

    <section class="pb-10 max-w-5xl mx-auto space-y-6">
      <h2 class="text-2xl font-medium text-center mb-8">Example usage</h2>
    </section>
  </main>
</Layout>
